<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java中的散列表——HashSet</title>
      <link href="/2018/11/30/Java%E4%B8%AD%E7%9A%84%E6%95%A3%E5%88%97%E8%A1%A8--HashSet/"/>
      <url>/2018/11/30/Java%E4%B8%AD%E7%9A%84%E6%95%A3%E5%88%97%E8%A1%A8--HashSet/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>“散列表，是一种数据结构，通过key与value的映射关系，实现平均时间复杂度为O(1)的查找功能。在Java中，每个类因为继承关系，都含有一个public int hashCode()方法，当我们要将自己实现的类作为散列表中的key时，我们需要自己重写这个函数……”</p></blockquote><h2 id="一、查找"><a href="#一、查找" class="headerlink" title="一、查找"></a>一、查找</h2><p>我们知道在查找一个线性表中是否<code>contains</code>某个值时，我们需要遍历整个线性表，判断是否存在某个值，时间复杂度为<code>O(n)</code>，如Java中的ArrayList和LinkedList：</p><h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果o不是null，遍历数组判断是否有相同的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2.LinkedList"></a>2.LinkedList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> index;</span><br><span class="line">               index++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//如果o不是null，遍历链表判断是否有相同的值</span></span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                   <span class="keyword">return</span> index;</span><br><span class="line">               index++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-HashSet"><a href="#3-HashSet" class="headerlink" title="3.HashSet"></a>3.HashSet</h3><blockquote><p>这时候散列表就显示出它的作用来了，它就是为快速查找value诞生的。在Java中<code>HashSet</code>就是散列表的实现，<code>HashSet</code>使用数组和链表来实现散列表，不同<code>hashcode</code>的value存放在不同数组下标的位置，相同<code>hashcode</code>的value存放在相同数组下标的链表上的不同位置上。在判断是否<code>contains</code>某个value时，我们需要传入要查找的value的key，然后:</p></blockquote><ul><li>先查找key是否存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>再计算key的hashcode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接着根据key的<code>hashcode</code>，找到该<code>hashcode</code>对应的数组下标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first = tab[(n - <span class="number">1</span>) &amp; hash];</span><br></pre></td></tr></table></figure><ul><li>假如恰好该数组下标的位置存放的链表的第一个节点的value就是所要找的value，那么所有查找的时间复杂度都是<code>O(1)</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">           ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">           <span class="keyword">return</span> first;</span><br></pre></td></tr></table></figure><ul><li>如果很不幸，散列表出现了<code>冲突</code>，也就是说该数组下标所在的位置存放了很多相同<code>hashcode</code>的不同value，那么还需要遍历链表来判断是否存在需要查找的value，<strong>此时查找的时间复杂度就取决于有具有相同<code>hashcode</code>的value的数量。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">        <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">  <span class="comment">//如果出现散列冲突，遍历链表查找</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、hashcode、冲突"><a href="#二、hashcode、冲突" class="headerlink" title="二、hashcode、冲突"></a>二、hashcode、冲突</h2><blockquote><p>上面我们对<code>HashSet</code>的介绍中，我们提到了几个名词<code>hashcode</code>、<code>冲突</code>，这里我们来解释一下</p></blockquote><h3 id="1-hashcode"><a href="#1-hashcode" class="headerlink" title="1.hashcode"></a>1.hashcode</h3><p>我们知道每个类都继承于Object，每个类中都有一个继承来的方法<code>public int hashCode()</code>，我们查看Java文档：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; This method is supported for the benefit of hash tables.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>也就是说，这个hashcode在散列表的构建中是至关重要的。</p><p>我们来看一个例子，在下面这个例子中，我们定义了一个Person类，将Person作为HashSet的泛型参数，并往集合中存了一个ID为12345678的Person。接着，我们调用contains方法查询是否有一个ID为12345678的Person，执行程序后，输出为false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ID;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Person&gt; people = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        people.add(<span class="keyword">new</span> Person(<span class="number">12345678</span>));</span><br><span class="line">        System.out.println(people.contains(<span class="keyword">new</span> Person(<span class="number">12345678</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output: false</span></span><br></pre></td></tr></table></figure><p>显然，这不是我们要的结果。这里出现的错误就是hashCode()方法引起的错误（当然还有equals()）。</p><h4 id="为什么会出现这种错误呢？"><a href="#为什么会出现这种错误呢？" class="headerlink" title="为什么会出现这种错误呢？"></a>为什么会出现这种错误呢？</h4><blockquote><p>因为在我们的Person类中，Person类自动继承了Object的hashCode()方法生成了hashcode，而基类是使用对象的地址计算hashcode的。所以我们存储在HashSet中的Person实例和我们查询时的Person实例地址是不一样的，自然它们的hashcode也是不一样的。</p></blockquote><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>我们重写了Person类的hashCode()方法，并重写了equals()方法，因为我们查看HashSet源码的时候，我们会发现都有一句<code>key.equals(k)</code>，HashSet使用equals()方法，判断当前的key是否和散列表中的key一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ID;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ((Person) obj).ID == <span class="keyword">this</span>.ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Person&gt; people = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        people.add(<span class="keyword">new</span> Person(<span class="number">12345678</span>));</span><br><span class="line">        System.out.println(people.contains(<span class="keyword">new</span> Person(<span class="number">12345678</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:true</span></span><br></pre></td></tr></table></figure><p>当我们完善了hashCode()方法和equals()方法后，我们得到了输出：true。</p><h4 id="一些约定"><a href="#一些约定" class="headerlink" title="一些约定"></a>一些约定</h4><p>接下来我们就可以了解一些覆写hashCode()方法的一些约定了：</p><ul><li>在应用程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法都必须始终如一地返回同一个整数。在同一个应用程序地多次执行中，每次执行所返回地整数可以不一致。</li><li>如果两个对象根据equals(Object)方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。</li><li>如果两个对象根据equals(Object)方法比较是不相等的，那么调用这两个对象中任意一个对象的hashCode方法，则不一定要产生不同的整数结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提供散列表的性能。</li></ul><p>约定的第三点中提到，即使两个对象根据equals()方法比较是不相等，那么它们的hashcode也有可能是相等的。这就是接下来要讲的冲突。</p><h3 id="2-冲突"><a href="#2-冲突" class="headerlink" title="2.冲突"></a>2.冲突</h3><blockquote><p>理解冲突的时候，我们需要了解散列表是如何构建的。在构建散列表的时候，是根据key计算出value存放的地址。在HashSet中是根据hash函数和key计算value存放的数组下标。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//HashSet中使用的hash函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">//如果该数组下标所在的地址为null，就实例化一个新的节点存放对象</span></span><br><span class="line"><span class="comment">//i = (n - 1) &amp; hash计算value存放的数组下标</span></span><br><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">          tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>而我们根据hash函数计算的hashcode，是有可能一样的。当一个散列表中，如果存在相同的hashcode，这种情况就称为<code>冲突</code>。</p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><ul><li>链接表法，把相同hashcode的value都放在一个链表中，HashSet就是采用这种方法解决的。</li><li>开放寻址法，不使用链表。如果计算出来的地址已经有了一个value，那么开放寻址法就在当前的hashcode基础上计算出一个为null的地址来存放新的value，该过程称为<code>探查</code>。</li></ul><p>在上面第一部分关于HashSet的分析中，我们知道散列表查询的性能很大程度上取决于冲突的发生。减少冲突的发生，就需要构建好的hash函数。</p><h2 id="三、hash函数"><a href="#三、hash函数" class="headerlink" title="三、hash函数"></a>三、hash函数</h2><p>在《算法导论中》，提到了一个好的hash函数的特点：</p><blockquote><p>一个好的散列函数应（近似地）满足简单均匀散列假设：每个关键字都会被等可能地散列到m个槽位中的任何一个，并与其他关键字已散列到哪个槽位无关。</p></blockquote><p>上面的槽位可以理解为数组下标。我们在上面举的Person的例子，使用每个人的ID来构建hashcode，这个就保证了每个key的hashcode都是不一样的，这种使用每个对象独一无二的属性来构建hashcode，也是一种hash方法。接下来我们来简单介绍一些hash函数：</p><ul><li>除法散列法。通过取k除以m的余数，将关键字k映射到m个槽中的一个。</li></ul><p>假设有以下这些key和value，除法散列法的hash函数为：<strong>f(key) =  key % 7</strong></p><table><thead><tr><th>key</th><th style="text-align:center">6</th><th style="text-align:center">15</th><th style="text-align:center">23</th><th style="text-align:center">67</th><th style="text-align:center">56</th><th style="text-align:center">45</th></tr></thead><tbody><tr><td>value</td><td style="text-align:center">11</td><td style="text-align:center">22</td><td style="text-align:center">33</td><td style="text-align:center">44</td><td style="text-align:center">55</td><td style="text-align:center">66</td></tr></tbody></table><p>那么经过散列之后的存储为：</p><blockquote><p>6 % 7 = 6    15 % 7 = 1    23 % 7 = 2    67 % 7 = 4    56 % 7 = 0    45 % 7 = 3</p></blockquote><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>55</td><td>22</td><td>33</td><td>66</td><td>44</td><td></td><td>11</td></tr></tbody></table><p>如果我们的key和value，是下面这个表，除法散列法的hash函数还是：<strong>f(key) =  key % 7</strong></p><table><thead><tr><th style="text-align:center">key</th><th style="text-align:center">6</th><th style="text-align:center">16</th><th style="text-align:center">24</th><th style="text-align:center">66</th><th style="text-align:center">55</th><th style="text-align:center">45</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:center">11</td><td style="text-align:center">22</td><td style="text-align:center">33</td><td style="text-align:center">44</td><td style="text-align:center">55</td><td style="text-align:center">66</td></tr></tbody></table><p>那么我们通过除法散列法得到的数组下标分别是：</p><blockquote><p>6 % 7 = 6    16 % 7 = 2    24 % 7 = 3    66 % 7 = 3    55 % 7 = 6    45 % 7 = 3</p></blockquote><p>我们发现发生了散列冲突了。这里我们试着用开放寻址法来解决，我们构造的再散列函数是：</p><p><strong>F(key) = (f(key) + 1) % 7</strong></p><p>解决冲突后的存储为：</p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">55</td><td style="text-align:center"></td><td style="text-align:center">22</td><td style="text-align:center">33</td><td style="text-align:center">44</td><td style="text-align:center">66</td><td style="text-align:center">11</td></tr></tbody></table><ul><li>乘法散列方法。<ul><li>用关键字k乘以常数A(0 &lt; A &lt; 1)，并提取kA的小数部分。</li><li>用m乘以这个值，再向下取整。</li></ul></li></ul><ul><li>全域散列方法。随机选择散列函数，使之独立于要存储的关键字。</li></ul><h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><p>因为HashSet每次在添加数据的时候都会先看集合中原来有没有存储相同的数据，如果有就将新的数据覆盖老的数据，所以可以保证HashSet中的数据是没有重复的。那么我们可以利用这个特性来进行数据去重。</p><p><em>如有错误，望指正</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
